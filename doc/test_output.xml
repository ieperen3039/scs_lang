<fn_type>
</fn_type>
</array_type>
<fn_type>
</fn_type>
</type_name>
<identifier>
</identifier>
<val>Ok(Rule({assignment, [{identifier, "directory"}]}))</val>
</assignment>
<method_call>
<identifier>
</identifier>
</method_call>
<assignment>
</assignment>
<val>Ok(Rule({statement, [{static_function_call, [{identifier, "fs"}, {method_call, [{identifier, "directoryOfThis"}]}]}, {assignment, [{identifier, "directory"}]}]}))</val>
<val>Ok(Rule({statement, [{static_function_call, [{identifier, "fs"}, {method_call, [{identifier, "directoryOfThis"}]}]}, {assignment, [{identifier, "directory"}]}]}))</val>
</statement>
<statement>
<identifier>
<val>Ok(Rule({identifier, "directory"}))</val>
</identifier>
<static_function_call>
<identifier>
<val>Ok(Rule({identifier, "directory"}))</val>
</identifier>
</static_function_call>
<function_block>
</function_block>
<array_initialisation>
</array_initialisation>
<string_literal>
</string_literal>
<integer_literal>
</integer_literal>
<decimal_literal>
</decimal_literal>
<hexadecimal_literal>
</hexadecimal_literal>
<binary_literal>
</binary_literal>
<method_call>
<identifier>
</identifier>
</method_call>
<assignment>
</assignment>
</statement>
<statement>
<identifier>
</identifier>
<static_function_call>
<identifier>
</identifier>
</static_function_call>
<function_block>
</function_block>
<array_initialisation>
</array_initialisation>
<string_literal>
</string_literal>
<integer_literal>
</integer_literal>
<decimal_literal>
</decimal_literal>
<hexadecimal_literal>
</hexadecimal_literal>
<binary_literal>
</binary_literal>
</statement>
<last_statement>
<identifier>
<val>Ok(Rule({identifier, "directory"}))</val>
</identifier>
<static_function_call>
<identifier>
<val>Ok(Rule({identifier, "directory"}))</val>
</identifier>
</static_function_call>
<function_block>
</function_block>
<array_initialisation>
</array_initialisation>
<string_literal>
</string_literal>
<integer_literal>
</integer_literal>
<decimal_literal>
</decimal_literal>
<hexadecimal_literal>
</hexadecimal_literal>
<binary_literal>
</binary_literal>
<method_call>
<identifier>
</identifier>
</method_call>
<val>Ok(Rule({last_statement, [{identifier, "directory"}]}))</val>
</last_statement>
<last_statement>
<identifier>
</identifier>
<static_function_call>
<identifier>
</identifier>
</static_function_call>
<function_block>
</function_block>
<array_initialisation>
</array_initialisation>
<string_literal>
</string_literal>
<integer_literal>
</integer_literal>
<decimal_literal>
</decimal_literal>
<hexadecimal_literal>
</hexadecimal_literal>
<binary_literal>
</binary_literal>
</last_statement>
<last_statement>
<identifier>
<val>Ok(Rule({identifier, "fs"}))</val>
</identifier>
<static_function_call>
<identifier>
<val>Ok(Rule({identifier, "fs"}))</val>
</identifier>
<method_call>
<identifier>
<val>Ok(Rule({identifier, "directoryOfThis"}))</val>
</identifier>
<val>Ok(Rule({method_call, [{identifier, "directoryOfThis"}]}))</val>
<val>Ok(Rule({method_call, [{identifier, "directoryOfThis"}]}))</val>
</method_call>
<val>Ok(Rule({static_function_call, [{identifier, "fs"}, {method_call, [{identifier, "directoryOfThis"}]}]}))</val>
<val>Ok(Rule({static_function_call, [{identifier, "fs"}, {method_call, [{identifier, "directoryOfThis"}]}]}))</val>
</static_function_call>
<function_block>
</function_block>
<array_initialisation>
</array_initialisation>
<string_literal>
</string_literal>
<integer_literal>
</integer_literal>
<decimal_literal>
</decimal_literal>
<hexadecimal_literal>
</hexadecimal_literal>
<binary_literal>
</binary_literal>
<method_call>
<identifier>
</identifier>
</method_call>
<method_call>
<identifier>
</identifier>
</method_call>
<method_call>
<identifier>
</identifier>
</method_call>
<val>Ok(Rule({last_statement, [{identifier, "fs"}]}))</val>
<val>Ok(Rule({last_statement, [{static_function_call, [{identifier, "fs"}, {method_call, [{identifier, "directoryOfThis"}]}]}]}))</val>
<val>Ok(Rule({last_statement, [{static_function_call, [{identifier, "fs"}, {method_call, [{identifier, "directoryOfThis"}]}]}]}))</val>
</last_statement>
<statement>
<identifier>
</identifier>
<static_function_call>
<identifier>
</identifier>
</static_function_call>
<function_block>
</function_block>
<array_initialisation>
</array_initialisation>
<string_literal>
</string_literal>
<integer_literal>
</integer_literal>
<decimal_literal>
</decimal_literal>
<hexadecimal_literal>
</hexadecimal_literal>
<binary_literal>
</binary_literal>
</statement>
<last_statement>
<identifier>
</identifier>
<static_function_call>
<identifier>
</identifier>
</static_function_call>
<function_block>
</function_block>
<array_initialisation>
</array_initialisation>
<string_literal>
</string_literal>
<integer_literal>
</integer_literal>
<decimal_literal>
</decimal_literal>
<hexadecimal_literal>
</hexadecimal_literal>
<binary_literal>
</binary_literal>
</last_statement>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
<statement>
<identifier>
<val>Ok(Rule({identifier, "fs"}))</val>
</identifier>
<static_function_call>
<identifier>
<val>Ok(Rule({identifier, "fs"}))</val>
</identifier>
<method_call>
<identifier>
<val>Ok(Rule({identifier, "directoryOfThis"}))</val>
</identifier>
<val>Ok(Rule({method_call, [{identifier, "directoryOfThis"}]}))</val>
<val>Ok(Rule({method_call, [{identifier, "directoryOfThis"}]}))</val>
</method_call>
<val>Ok(Rule({static_function_call, [{identifier, "fs"}, {method_call, [{identifier, "directoryOfThis"}]}]}))</val>
<val>Ok(Rule({static_function_call, [{identifier, "fs"}, {method_call, [{identifier, "directoryOfThis"}]}]}))</val>
</static_function_call>
<function_block>
</function_block>
<array_initialisation>
</array_initialisation>
<string_literal>
</string_literal>
<integer_literal>
</integer_literal>
<decimal_literal>
</decimal_literal>
<hexadecimal_literal>
</hexadecimal_literal>
<binary_literal>
</binary_literal>
<method_call>
<identifier>
</identifier>
</method_call>
<assignment>
</assignment>
<method_call>
<identifier>
</identifier>
</method_call>
<assignment>
<type_name>
<identifier>
<val>Ok(Rule({identifier, "directory"}))</val>
</identifier>
<generic_type>
</generic_type>
<array_type>
<identifier>
    <val>Ok(Rule({identifier, "directory"}))</val>
</identifier>
<generic_type>
</generic_type>
<fn_type>
</fn_type>
</array_type>
<fn_type>
</fn_type>
<val>Ok(Rule({type_name, [{identifier, "directory"}]}))</val>
</type_name>
<identifier>
</identifier>
<identifier>
<val>Ok(Rule({identifier, "directory"}))</val>
</identifier>
<type_name>
<identifier>
</identifier>
<array_type>
<identifier>
</identifier>
<fn_type>
</fn_type>
</array_type>
<fn_type>
</fn_type>
</type_name>
<identifier>
</identifier>
<val>Ok(Rule({assignment, [{identifier, "directory"}]}))</val>
</assignment>
<method_call>
<identifier>
</identifier>
</method_call>
<assignment>
</assignment>
<val>Ok(Rule({statement, [{static_function_call, [{identifier, "fs"}, {method_call, [{identifier, "directoryOfThis"}]}]}, {assignment, [{identifier, "directory"}]}]}))</val>
<val>Ok(Rule({statement, [{static_function_call, [{identifier, "fs"}, {method_call, [{identifier, "directoryOfThis"}]}]}, {assignment, [{identifier, "directory"}]}]}))</val>
</statement>
<statement>
<identifier>
<val>Ok(Rule({identifier, "directory"}))</val>
</identifier>
<static_function_call>
<identifier>
<val>Ok(Rule({identifier, "directory"}))</val>
</identifier>
</static_function_call>
<function_block>
</function_block>
<array_initialisation>
</array_initialisation>
<string_literal>
</string_literal>
<integer_literal>
</integer_literal>
<decimal_literal>
</decimal_literal>
<hexadecimal_literal>
</hexadecimal_literal>
<binary_literal>
</binary_literal>
<method_call>
<identifier>
</identifier>
</method_call>
<assignment>
</assignment>
</statement>
<statement>
<identifier>
</identifier>
<static_function_call>
<identifier>
</identifier>
</static_function_call>
<function_block>
</function_block>
<array_initialisation>
</array_initialisation>
<string_literal>
</string_literal>
<integer_literal>
</integer_literal>
<decimal_literal>
</decimal_literal>
<hexadecimal_literal>
</hexadecimal_literal>
<binary_literal>
</binary_literal>
</statement>
<last_statement>
<identifier>
<val>Ok(Rule({identifier, "directory"}))</val>
</identifier>
<static_function_call>
<identifier>
<val>Ok(Rule({identifier, "directory"}))</val>
</identifier>
</static_function_call>
<function_block>
</function_block>
<array_initialisation>
</array_initialisation>
<string_literal>
</string_literal>
<integer_literal>
</integer_literal>
<decimal_literal>
</decimal_literal>
<hexadecimal_literal>
</hexadecimal_literal>
<binary_literal>
</binary_literal>
<method_call>
<identifier>
</identifier>
</method_call>
<val>Ok(Rule({last_statement, [{identifier, "directory"}]}))</val>
</last_statement>
<last_statement>
<identifier>
</identifier>
<static_function_call>
<identifier>
</identifier>
</static_function_call>
<function_block>
</function_block>
<array_initialisation>
</array_initialisation>
<string_literal>
</string_literal>
<integer_literal>
</integer_literal>
<decimal_literal>
</decimal_literal>
<hexadecimal_literal>
</hexadecimal_literal>
<binary_literal>
</binary_literal>
</last_statement>
<last_statement>
<identifier>
<val>Ok(Rule({identifier, "fs"}))</val>
</identifier>
<static_function_call>
<identifier>
<val>Ok(Rule({identifier, "fs"}))</val>
</identifier>
<method_call>
<identifier>
<val>Ok(Rule({identifier, "directoryOfThis"}))</val>
</identifier>
<val>Ok(Rule({method_call, [{identifier, "directoryOfThis"}]}))</val>
<val>Ok(Rule({method_call, [{identifier, "directoryOfThis"}]}))</val>
</method_call>
<val>Ok(Rule({static_function_call, [{identifier, "fs"}, {method_call, [{identifier, "directoryOfThis"}]}]}))</val>
<val>Ok(Rule({static_function_call, [{identifier, "fs"}, {method_call, [{identifier, "directoryOfThis"}]}]}))</val>
</static_function_call>
<function_block>
</function_block>
<array_initialisation>
</array_initialisation>
<string_literal>
</string_literal>
<integer_literal>
</integer_literal>
<decimal_literal>
</decimal_literal>
<hexadecimal_literal>
</hexadecimal_literal>
<binary_literal>
</binary_literal>
<method_call>
<identifier>
</identifier>
</method_call>
<method_call>
<identifier>
</identifier>
</method_call>
<method_call>
<identifier>
</identifier>
</method_call>
<val>Ok(Rule({last_statement, [{identifier, "fs"}]}))</val>
<val>Ok(Rule({last_statement, [{static_function_call, [{identifier, "fs"}, {method_call, [{identifier, "directoryOfThis"}]}]}]}))</val>
<val>Ok(Rule({last_statement, [{static_function_call, [{identifier, "fs"}, {method_call, [{identifier, "directoryOfThis"}]}]}]}))</val>
</last_statement>
<statement>
<identifier>
</identifier>
<static_function_call>
<identifier>
</identifier>
</static_function_call>
<function_block>
</function_block>
<array_initialisation>
</array_initialisation>
<string_literal>
</string_literal>
<integer_literal>
</integer_literal>
<decimal_literal>
</decimal_literal>
<hexadecimal_literal>
</hexadecimal_literal>
<binary_literal>
</binary_literal>
</statement>
<last_statement>
<identifier>
</identifier>
<static_function_call>
<identifier>
</identifier>
</static_function_call>
<function_block>
</function_block>
<array_initialisation>
</array_initialisation>
<string_literal>
</string_literal>
<integer_literal>
</integer_literal>
<decimal_literal>
</decimal_literal>
<hexadecimal_literal>
</hexadecimal_literal>
<binary_literal>
</binary_literal>
</last_statement>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<scope>
<identifier>
</identifier>
</scope>
<type_definition>
</type_definition>
<enum_definition>
</enum_definition>
<implementation>
</implementation>
<function_definition>
<function_signature>
</function_signature>
</function_definition>
<include_declaration>
</include_declaration>
<alias_declaration>
</alias_declaration>
<function_block>
</function_block>
<function_block>
</function_block>
<scope>
<identifier>
</identifier>
</scope>
<type_definition>
</type_definition>
<enum_definition>
</enum_definition>
<implementation>
</implementation>
<function_definition>
<function_signature>
</function_signature>
</function_definition>
<include_declaration>
</include_declaration>
<alias_declaration>
</alias_declaration>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<scope>
<identifier>
</identifier>
</scope>
<type_definition>
</type_definition>
<enum_definition>
</enum_definition>
<implementation>
</implementation>
<function_definition>
<function_signature>
</function_signature>
</function_definition>
<include_declaration>
</include_declaration>
<alias_declaration>
</alias_declaration>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<scope>
<identifier>
</identifier>
</scope>
<type_definition>
</type_definition>
<enum_definition>
</enum_definition>
<implementation>
</implementation>
<function_definition>
<function_signature>
</function_signature>
</function_definition>
<include_declaration>
</include_declaration>
<alias_declaration>
</alias_declaration>
<function_block>
</function_block>
<scope>
<identifier>
</identifier>
</scope>
<type_definition>
</type_definition>
<enum_definition>
</enum_definition>
<implementation>
</implementation>
<function_definition>
<function_signature>
</function_signature>
</function_definition>
<include_declaration>
</include_declaration>
<alias_declaration>
</alias_declaration>
<function_block>
</function_block>
<function_block>
</function_block>
<scope>
<identifier>
<val>Ok(Rule({identifier, "version"}))</val>
</identifier>
</scope>
<type_definition>
</type_definition>
<enum_definition>
</enum_definition>
<implementation>
</implementation>
<function_definition>
<function_signature>
</function_signature>
</function_definition>
<include_declaration>
</include_declaration>
<alias_declaration>
</alias_declaration>
<function_block>
</function_block>
<version_declaration>
</version_declaration>
<scope>
<identifier>
</identifier>
</scope>
<type_definition>
</type_definition>
<enum_definition>
</enum_definition>
<implementation>
</implementation>
<function_definition>
<function_signature>
</function_signature>
</function_definition>
<include_declaration>
</include_declaration>
<alias_declaration>
</alias_declaration>
<function_block>
</function_block>
<function_block>
</function_block>
<version_declaration>
</version_declaration>
<scope>
<identifier>
</identifier>
</scope>
<type_definition>
</type_definition>
<enum_definition>
</enum_definition>
<implementation>
</implementation>
<function_definition>
<function_signature>
</function_signature>
</function_definition>
<include_declaration>
</include_declaration>
<alias_declaration>
</alias_declaration>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<version_declaration>
</version_declaration>
<scope>
<identifier>
</identifier>
</scope>
<type_definition>
</type_definition>
<enum_definition>
</enum_definition>
<implementation>
</implementation>
<function_definition>
<function_signature>
</function_signature>
</function_definition>
<include_declaration>
</include_declaration>
<alias_declaration>
</alias_declaration>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<version_declaration>
</version_declaration>
<scope>
<identifier>
</identifier>
</scope>
<type_definition>
</type_definition>
<enum_definition>
</enum_definition>
<implementation>
</implementation>
<function_definition>
<function_signature>
</function_signature>
</function_definition>
<include_declaration>
</include_declaration>
<alias_declaration>
</alias_declaration>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<version_declaration>
</version_declaration>
<scope>
<identifier>
</identifier>
</scope>
<type_definition>
</type_definition>
<enum_definition>
</enum_definition>
<implementation>
</implementation>
<function_definition>
<function_signature>
</function_signature>
</function_definition>
<include_declaration>
</include_declaration>
<alias_declaration>
</alias_declaration>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<version_declaration>
</version_declaration>
<scope>
<identifier>
</identifier>
</scope>
<type_definition>
</type_definition>
<enum_definition>
</enum_definition>
<implementation>
</implementation>
<function_definition>
<function_signature>
</function_signature>
</function_definition>
<include_declaration>
</include_declaration>
<alias_declaration>
</alias_declaration>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<version_declaration>
</version_declaration>
<scope>
<identifier>
</identifier>
</scope>
<type_definition>
</type_definition>
<enum_definition>
</enum_definition>
<implementation>
</implementation>
<function_definition>
<function_signature>
</function_signature>
</function_definition>
<include_declaration>
</include_declaration>
<alias_declaration>
</alias_declaration>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<version_declaration>
</version_declaration>
<scope>
<identifier>
</identifier>
</scope>
<type_definition>
</type_definition>
<enum_definition>
</enum_definition>
<implementation>
</implementation>
<function_definition>
<function_signature>
</function_signature>
</function_definition>
<include_declaration>
</include_declaration>
<alias_declaration>
</alias_declaration>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<version_declaration>
</version_declaration>
<scope>
<identifier>
</identifier>
</scope>
<type_definition>
</type_definition>
<enum_definition>
</enum_definition>
<implementation>
</implementation>
<function_definition>
<function_signature>
</function_signature>
</function_definition>
<include_declaration>
</include_declaration>
<alias_declaration>
</alias_declaration>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<function_block>
</function_block>
<version_declaration>
</version_declaration>
<scope>
<identifier>
</identifier>
</scope>
<type_definition>
</type_definition>
<enum_definition>
</enum_definition>
<implementation>
</implementation>
<function_definition>
<function_signature>
</function_signature>
</function_definition>
<include_declaration>
</include_declaration>
<alias_declaration>
</alias_declaration>
<function_block>
</function_block>
</scs_program>