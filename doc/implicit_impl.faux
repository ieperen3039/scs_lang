// all types that can be written in faux_lang
variant Result<P, N> [
    Pos(P),
    Neg(N),
]

type Maybe<T> = Result<T, void>
type boolean = Result<void, void>

const boolean true = boolean.Pos(void)
const boolean false = boolean.Neg(void)

// implementations
impl int {
    // only define the plus symbol, because of operator precedence
    // (which we don't have)
    op "+" add;

    fn add(int other) : int extern
    fn sub(int other) : int extern
    fn mul(int other) : int extern
    fn div(int other) : int extern

    fn less_than(int other) : boolean extern
    fn less_or_equal_to(int other) : boolean { 
        this equal_to(other) or({ this less_than(other) })
    }

    fn greater_than(int other) : boolean extern
    fn greater_or_equal_to(int other) : boolean { 
        this equal_to(other) or({ this greater_than(other) })
    }

    fn equal_to(int other) : boolean extern
    fn as_float : float extern
}

impl float {
    op "+" add;

    fn add(float other) : float extern
    fn sub(float other) : float extern
    fn mul(float other) : float extern
    fn div(float other) : float extern

    fn less_than(float other) : boolean extern
    fn greater_than(float other) : boolean extern
}

impl String {
    fn equal_to(String other) : boolean extern
    fn as_char_buffer() : character[] extern
}

impl Result<P, N> {
    op "?" : on_pos
    op "!" : on_neg 

    fn invert : Result<N, P> { 
        this switch(Pos: Result.Neg, Neg: Result.Pos)
    }

    fn unwrap_pos_or(P default) : P { switch(Pos: identity, Neg: { : default }) }
    fn unwrap_neg_or(N default) : N { switch(Pos: { : default }, Neg: identity) }
    
    fn map_both(fn<(P)PR> pos, fn<(N)NR> neg) : Result<PR, NR> {
        this 
            ? pos // Result<PR, N>
            ! neg // Result<PR, NR>
    }

    fn on_pos<R>(fn<(P)R> mapping) : Result<R, N> { map_both(pos: mapping, neg: identity) }
    fn on_neg<R>(fn<(N)R> mapping) : Result<P, R> { map_both(pos: identity, neg: mapping) }
}

// any array of results can be collapsed
impl Result<P, N>[] {
    fn any : Maybe<P> extern
    fn all : boolean extern
    fn filter_pos : P[] extern
    fn filter_neg : N[] extern
}

impl Result<T, T> {
    // return the value, whichever it is
    fn collapse : T {
        this 
            ?= return // T
            = return
    }
}

impl Maybe<T> {
    const Maybe<T> None = Maybe.Neg(void)

    fn Some(T element) : Maybe<T> {
        Maybe.Pos(element)
    }
}

impl boolean {
    fn or(fn<boolean> else) : boolean { this !: else() }
    fn and(fn<boolean> else) : boolean { this ?: else() }
}

impl Maybe<T>[] {
    fn filter : T[] { this filter_pos }
}

//  the enum type is a type, each enum value is an object instance
impl enum {
    /* every element of the enum expands to an argument of type T, with the name of the element as argument name */
    fn switch<T>(T ... expression) : T extern
    fn equalTo(enum other): boolean extern
}

// both the variant type and the variant elements are types
// the variant elements are separately instantiable and name-able
impl variant<E...> {
    /* every element of the variant expands to an argument of type T, with the name of the element as argument name */
    fn switch<T>(fn<(E)T> ... expression) : T extern
    fn as(E expected): Maybe<E> extern
}

impl variant<E...>[] {
    // returns a tuple of buffers
    fn split : [E[]...] extern
}

math {
    fn max(int a, int b) : int {
        a 
            greater_than(b)
            ?: a 
            !: b
            collapse
    }
}