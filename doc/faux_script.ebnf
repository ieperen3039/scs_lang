faux_script             = statement, { statement_separator, statement }, [ statement_separator, { function_definition } ];

(* namespaces and definitions *)
identifier              = ? IDENTIFIER ?;
namespace_name          = ? IDENTIFIER ?;
(* reference to existing type *)
type_ref                = ( result_type_ref | optional_type_ref | _singular_type_ref ), { stream_symbol };
result_type_ref         = _singular_type_ref, "!", _singular_type_ref;
optional_type_ref       = _singular_type_ref, "?";
(* reference to existing base type, enum or variant. *)
_singular_type_ref      = ( base_type_ref | flag_type_ref | tuple_type_ref | fn_type );
base_type_ref           = identifier;
flag_type_ref           = _keyword_flag;
tuple_type_ref          = "[", type_ref, { ",", type_ref }, "]";
fn_type                 = _keyword_fn, "<", [ "(", unnamed_parameter_list, ")" ], return_type, ">";

(* function definitions and parameters *)
function_definition     = _keyword_fn, function_name, _function_interface, "{", function_body, "}";
function_name           = ? IDENTIFIER ?;
_function_interface     = "(", [ parameter_list ], ")", ":", return_type;
parameter_list          = parameter, { ",", parameter };
parameter               = type_ref, identifier;

unnamed_parameter_list  = type_ref, { ",", type_ref };
untyped_parameter_list  = identifier, { ",", identifier };
return_type             = type_ref | no_return_type_ref;
no_return_type_ref      = "!";

(* statements *)
function_body           = statement, { statement_separator, statement }, [ statement_separator ];
statement               = value_expression, { function_expression }; 
value_expression        = function_call | variable_name | tuple_construction | _literal | function_as_value; 
function_expression     = function_call | implicit_par_lamda | explicit_par_lamda | mutator_cast | mutator_assign | operator_expression;
operator_expression     = operator, function_expression;
function_as_value       = "$", function_expression;
statement_separator     = ";";
variable_name           = ? IDENTIFIER ?;

(* function call statements *)
function_call           = { namespace_name, "." }, function_name, "(", [ _argument_list ], ")";
_argument_list          = argument, { ",", argument };
argument                = named_argument | unnamed_argument | flag_argument;
unnamed_argument        = function_call | tuple_construction | _literal | function_as_value;
flag_argument           = ? IDENTIFIER ?;
named_argument          = identifier, "=", value_expression;

(* mutators, selectors and usage indicators *)
operator                = ? OPERATOR ?;
mutator_cast            = _usage_cast, type_ref;
mutator_assign          = _usage_assign, ( [ type_ref ], variable_name);

(* lamdas *)
(* the first statement of a implicit parameter lamdas starts with a function expression *)
implicit_par_lamda      = "{", function_expression, { function_expression }, { statement_separator, statement }, [ statement_separator ], "}";
(* a lamda with zero parameters must have parenthesis, otherwise it is near-indistinguishable from implicit parameter lamdas *)
explicit_par_lamda      = "(", [ untyped_parameter_list ], ")", "{", function_body, "}";

(* other statements *)
tuple_construction      = "[", value_expression, { ",", value_expression }, "]";
_literal                = string_literal | integer_literal | dollar_string_literal | raw_string_literal;
(* any character following a '\' is escaped *)
string_literal          = ? STRING ?;
(* in addition to '\' escapes, every `${foo}` is replaced with the value of variable `foo` *)
dollar_string_literal   = "$", ? STRING ?;
(* slashes are not considered escape characters *)
raw_string_literal      = "r#", ? STRING ?, "#";
integer_literal         = ? NUMBER ?;

(* symbol definitions *)
_usage_assign = "=";
_usage_cast = "as";
stream_symbol = "[]";

(* keywords *)
_keyword_version = "version";
_keyword_type = "type";
_keyword_fn = "fn";
_keyword_enum = "enum";
_keyword_variant = "variant";
_keyword_extern = "extern";
_keyword_const = "const";
_keyword_this = "this";
_keyword_use = "use";
_keyword_flag = "flag";
_keyword_start_implementation = "impl";