// primitives
type void = extern // zero-sized nothing-type
type character = extern
type int = extern 
type float = extern 

// structures
variant Result<P, N> {
    Pos(P),
    Neg(N),
}

// derived
type Maybe<T> = Result<T, void>
type boolean = Result<void, void> // = Maybe<void>
type String = character[] 
type fn<R> = fn<()R>

// implementations
impl boolean {
    fn or(boolean else) : boolean { this !: else }
    fn and(boolean else) : boolean { this ?: else }

    op "||" : or
    op "&&" : and
}
impl int {
    fn less_than(int other): boolean extern
    fn less_or_equal_to(int other): boolean { 
        this equal_to(other) || { this less_than(other) }
    }

    fn greater_than(int other): boolean extern
    fn greater_or_equal(int other): boolean { 
        this equal_to(other) || { this greater_than(other) }
    }

    fn equal_to(int other) : boolean extern
    fn as_float : float extern
}
impl float {
    fn less_than(float other): boolean extern
    fn greater_than(float other): boolean extern
}
impl String {
    fn equal_to(String other): boolean extern
    fn is: LogicBuilder<String> extern
}

impl Result<P, N> {
    op "?" : on_pos
    op "!" : on_neg 

    fn invert : Result<N, P> { 
        this switch(Pos: Result.Neg, Neg: Result.Pos)
    }

    fn unwrap_pos_or(N default) : P switch(Pos: identity, Neg: default)
    fn unwrap_neg_or(P default) : N switch(Pos: default, Neg: identity)
    
    fn map_both(fn<(P)R> pos, fn<(N)R> neg) {
        this ? pos ! neg = return; 
    }

    fn on_pos<R>(fn<(P)R> mapping) : Result<R, N> map_both(pos: mapping, neg: identity)
    fn on_neg<R>(fn<(N)R> mapping) : Result<P, R> map_both(pos: identity, neg: mapping)
}

// any array of results can be collapsed
impl Result<P, N>[] {
    fn any: Maybe<P> extern
    fn all: boolean extern
    fn filter_pos: P[] extern
    fn filter_neg: N[] extern
}

impl Maybe<T>[] {
    fn filter: T[] { this filter_pos }
}

impl<T> T {
    op "=" : _assign_to_variable
    op ":" : _replace_with

    fn identity : T { this }
    fn equalTo<T>(T other) : boolean extern
    fn not(fn<(T)boolean> expression) : boolean { expression invert }

    // discards `this` and returns `new_value`
    fn _replace_with<R>(R new_value) : R { new_value }
     // creates a new name in the scope
    fn _assign_to_variable(...) : void extern
}

// we call this a "buffer" (because it is not implemented as a true array)
impl<T> T[] {
    op ">" : map
    op "+" : append

    fn reduce(fn<(T, T)T> collector) : T extern
    fn reduce<Acc>(Acc accumulator, fn<(Acc, T)Acc> collector) : Acc extern
    fn map<R>(fn<(T)R> mapping) : R[] extern
    fn first : Maybe<T> extern
    fn append(T new_element) : T[] extern

    // combines every two adjacent elements into a new element (resulting in an buffer of 1 less length)
    fn derive<R>(fn<(T, T)R> mapping) : R[] extern
    // maps each element, using its neighboring elements (SCP_2)
    fn transform<R>(fn<(Maybe<T>, T, Maybe<T>)R> mapping) : R[] extern
    // maps each element sequentially, based on a stateful processor (SCP_4)
    fn process<Proc>(Proc processor, fn<([Proc, T])[Proc, T]> collector) : T[] extern
    // split the buffer along specific elements, keeping adjacent elements in the same order
    fn split(T separator) : T[][] extern

    // partition does not change the number of elements in the buffer.
    fn partition(fn<(T)boolean> predicate) : Result<T, T>[] {
        this > (elt) { 
            predicate(elt) !: elt ?: elt 
        }
    }

    fn filter(fn<(T)boolean> predicate) : T[] { 
        this > (elt) { 
            elt predicate ?: elt 
        }
        filter_pos
    }

    fn append(T[] other) : T[] { other reduce(this, append) }
}

//  the enum type is a type, each enum value is an object instance
impl enum {
    /* every element of the enum expands to an argument of type T, with the name of the element as argument name */
    fn switch<T>(T ... expression) : T extern
    fn equalTo(enum other): boolean extern
}

// both the variant type and the variant elements are types
// the variant elements are separately instantiable and name-able
impl variant<E...> {
    /* every element of the variant expands to an argument of type T, with the name of the element as argument name */
    fn switch<T>(fn<(E)T> ... expression) : T extern
    fn as(E expected): Maybe<E> extern
}

impl variant<E...>[] {
    // returns a tuple of buffers
    fn split : [E[]...] extern
}