scs_program             = [ _shebang ], _, [ version_declaration ], { definition | include_declaration | alias_declaration }, _, function_block;

version_declaration     = _keyword_Version, _, version_dialect, _, [ version ];
version_dialect         = _name;
version                 = integer_literal, ".", integer_literal, ".", integer_literal, _;

include_declaration     = _keyword_Use, _, string_literal, _;
alias_declaration       = _keyword_Use, _, identifier, _, "=", _, identifier, _;

definition              = scope | type_definition | enum_definition | implementation | function_definition;
scope                   = identifier, _, "{", _, { definition }, "}", _;

type_definition         = _keyword_Type, _, "=", _, ( type_name | _keyword_Native, _ ), [ "{", _, { function_definition }, "}", _ ];
type_name               = named_type | array_type | fn_type;
named_type              = identifier, _, [ generic_type ];
generic_type            = "<", _, identifier, _, ">", _;
array_type              = type_name, "[", _, "]", _;
fn_type                 = _keyword_Fn, _, [ "<", _, [ "(", _, { unnamed_parameter_list }, ")", _ ], type_name, ">", _ ];
unnamed_parameter_list  = type_name, { ",", _, type_name };
enum_definition         = _keyword_Enum, _, identifier, _, "[", _, { identifier, _, ",", _ }, "]", _;

implementation          = _keyword_start_implementation, _, type_name, "{", _, { function_definition }, "}", _;

function_definition     = function_signature, ( function_block | _keyword_Native, _ );
function_signature      = _keyword_Fn, _, [ _keyword_Static, _ ], identifier, [ generic_type ], [ "(", _, [ parameter_list ], ")", _ ], ":", _, type_name;
parameter_list          = parameter, { ",", _, parameter };
parameter               = type_name, [ "...", _ ], identifier;
function_block          = "{", _, { statement }, [ last_statement ], "}", _;
statement               = expression, { method_call }, [ assignment ], ";", _;
last_statement          = expression, { method_call };
expression              = identifier | static_function_call | function_block | array_initialisation | _literal, _;
static_function_call    = identifier, _, ".", method_call;
method_call             = identifier, _, [ "(", _, [ argument_list ], ")", _ ];
argument_list           = identifier, _ | named_argument, { ",", _, named_argument };
named_argument          = identifier, _, ":", _, expression;
array_initialisation    = "[", _, [ expression, { ",", _, expression } ], "]", _;
_literal                 = string_literal | integer_literal | decimal_literal | hexadecimal_literal | binary_literal;
assignment              = ">", _, ( _keyword_Return, _ | [ type_name ], identifier);
identifier = _name;

_name = "/[a-zA-Z_][a-zA-Z0-9_]*/";
string_literal = '/"(.*?[^\\]|)"/';
integer_literal = "/\d*/";
decimal_literal = "/0-9[0-9_]*.[0-9]*/";
hexadecimal_literal = "/0x[0-9A-F_]+/";
binary_literal = "/0b[01_]+*/";

_keyword_Version = "version";
_keyword_Type = "type";
_keyword_Fn = "fn";
_keyword_Enum = "enum";
_keyword_Native = "native";
_keyword_This = "this";
_keyword_Return = "return";
_keyword_Static = "static";
_keyword_Use = "use";
_keyword_start_implementation = "impl";

_shebang = "/#!.*/";

_ = { _line_comments | _whitespace | _newline | _block_comments };
_whitespace = "/\s/";
_newline = "/\n/";
_line_comments = "/\/\/.*/";
_block_comments = "/\/\*.*\*\//";