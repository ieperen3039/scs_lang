scs_program             = [ _shebang ], _, [ version_declaration, _ ], { ( _definition | include_declaration ), _ }, [ program_interface, _, function_block ], _;
program_interface       = _function_interface;

(* version *)
version_declaration     = _keyword_version, _, version_dialect, [ _, version ];
version_dialect         = _name;
version                 = version_major, ".", version_minor, ".", version_patch;
version_major           = _integer_number;
version_minor           = _integer_number;
version_patch           = _integer_number;

(* include section *)
include_declaration     = _keyword_use, _, '"', include_file, '"';
include_file            =  { directory, "/" }, file;
directory               = _file_name;
file                    = _file_name;

(* scopes and definitions *)
_definition             = scope | type_definition | enum_definition | implementation | function_definition;
scope_name              = _name;
scope                   = scope_name, _, "{", { _definition, _ }, _, "}";
_scope_reference        = scope_name, { ".", scope_name };
type_definition         = _keyword_type, _, base_type_decl, _, [ ( ":", _, derived_type, _ ) | ( native_decl, _ ) ], ["{", { _, field_declaration }, _, "}" ];
field_declaration       = type_ref, _, identifier, _, ";";
(* reference to existing type *)
type_ref                = ( ( [ _scope_reference ], _, base_type_ref ) | fn_type ), { _, array_symbol };
(* reference to existing type, but cannot be a function of array *)
derived_type            = [ _scope_reference ], base_type_ref;
(* reference to existing type, could be an enum, instantiates generic types *)
base_type_ref           = identifier, _, [ generic_types_inst ];
(* declaration of new type, declares the existence of generic types *)
base_type_decl          = identifier, _, [ generic_types_decl ];
(* declares the existence of generic types *)
generic_types_decl      = "<", _, identifier, { _, identifier }, _, ">";
(* instantiates generic types *)
generic_types_inst      = "<", _, type_ref, { _, type_ref }, _, ">";
(* function does not actually use generics, only syntactically *)
fn_type                 = _keyword_fn, _, [ "<", _, [ "(", _, unnamed_parameter_list, _, ")", _ ], return_type, _, ">" ];
enum_definition         = _keyword_enum, _, enum_value_decl, _, "[", _, { enum_value_decl, _, ",", _ }, "]";
enum_value_decl         = _name;
(* generics are not instantiated, hence a base_type_decl *)
implementation          = _keyword_start_implementation, _, base_type_decl, { _, array_symbol }, _, "{", _, { function_definition, _ }, "}";

(* function definitions and parameters *)
function_definition     = function_signature, _, ( function_block | native_decl );
function_signature      = _keyword_fn, _, function_name, _, [ generic_types_decl, _ ], _function_interface;
function_name           = _name;
_function_interface      = "(", _, [ parameter_list, _ ], ")", _, ":", _, return_type;
parameter_list          = parameter, { _, ",", _, parameter };
parameter               = type_ref, _, [ expansion_decl, _ ], identifier;
unnamed_parameter_list  = _type_list;
untyped_parameter_list  = _name_list;
return_type             = type_ref;

(* statements *)
function_block          = "{", _, statement, _, { ";", _, [ statement, _ ] }, "}";
statement               = _expression, { _, _mutator }; 
_expression             = identifier | static_function_call | lambda | array_initialisation | _literal;

(* function call statements *)
static_function_call    = [ _scope_reference ], _function_call_tail;
method_call             = _function_call_tail;
_function_call_tail     = function_name, _, [ "(", [ _, _argument_list ], _, ")" ];
_argument_list          = single_argument | ( named_argument, { _, ",", _, named_argument } );
single_argument         = _expression;
named_argument          = identifier, _, ":", _, _expression;
_type_list              = type_ref, { _, ",", _, type_ref };
_name_list              = identifier, { _, ",", _, identifier };
_static_callable        = ( _scope_reference, identifier ) | lambda;

(* mutators, selectors and usage indicators *)
_mutator                = method_call | method_to_function_call | operator;
method_to_function_call = type_ref, ".", _function_call_tail;
operator                = "/\S+/";
_mutator_cast           = usage_cast, _, type_ref, _, _cast_end;
_mutator_assign         = usage_assign, _, ( return_decl | ( [ type_ref ], _, identifier) );

(* other statements *)
array_initialisation    = "[", [ _, _expression, { _, ",", _, _expression } ], _, "]";
lambda                  = _lamda;
_lamda                  = [ "(", _, untyped_parameter_list, _, ")", _ ], [ ":", _, return_type ], _, function_block;
_literal                = string_literal | integer_literal;

(* keyword wrappers *)
return_decl             = _keyword_return;
native_decl             = _keyword_native;

(* other wrappers *)
identifier = _name;
string_literal = _string_literal;
integer_literal = _integer_number;
floating_point_literal = _floating_point_number;

(* symbol definitions *)
usage_assign = "=";
usage_cast = ":<";
_cast_end = ">";
array_symbol = "[]";

expansion_decl = "...";

(* keywords *)
_keyword_version = "version";
_keyword_type = "type";
_keyword_fn = "fn";
_keyword_enum = "enum";
_keyword_variant = "variant";
_keyword_native = "native";
_keyword_this = "this";
_keyword_return = "return";
(* _keyword_static = "static"; *)
_keyword_use = "use";
_keyword_start_implementation = "impl";

(* regex matchers *)
_name = "/[\w][\w0-9]*/";
_string_literal = '/"(.*?[^\\]|)"/';
_integer_number = "/\d+/";
_floating_point_number = "/0-9[0-9_]*.[0-9]*/";
(* _hexadecimal_number = "/0x[0-9A-F_]+/"; *)
(* _binary_number = "/0b[01_]+*/"; *)
_file_name = '/[^\\\/"\n]+/';
_shebang = "/#!.*/";

(* whitespace *)
_ = { _line_comments | _block_comments | _whitespace };
_whitespace = "/[\s\r\n]+/";
_line_comments = "/\/\/.*/", _whitespace;
_block_comments = "/\/\*.*?\*\//";