__081                          = ? EMPTY ?;
__000                          = ( __081 | ( version_declaration, _ ) );
__001                          = ( include_declaration, _ );
__002                          = ( ( __001, __002 ) | __081 );
__003                          = __002;
__004                          = ( _definition, _ );
__005                          = ( ( __004, __005 ) | __081 );
__006                          = __005;
__007                          = ( __081 | ( _function_interface, _, function_block ) );
faux_program                   = ( _, __000, __002, __005, __007, _ );
program_interface              = _function_interface;
__008                          = ( __081 | ( _, version ) );
version_declaration            = ( _keyword_version, _, version_dialect, __008 );
version_dialect                = ? IDENTIFIER ?;
__009                          = ".";
version                        = ( version_major, __009, version_minor, __009, version_patch );
version_major                  = ? NUMBER ?;
version_minor                  = ? NUMBER ?;
version_patch                  = ? NUMBER ?;
include_declaration            = ( _keyword_use, _, include_file );
include_file                   = ? STRING ?;
identifier                     = ? IDENTIFIER ?;
_definition                    = ( constant_def | scope | type_definition | enum_definition | variant_definition | implementation | function_definition );
__010                          = "{";
__011                          = ( ( __004, __011 ) | __081 );
__012                          = __011;
__013                          = "}";
scope                          = ( scope_name, _, __010, _, __011, __013 );
scope_name                     = ? IDENTIFIER ?;
__014                          = ( derived_type | _keyword_extern );
type_definition                = ( _keyword_type, _, base_type_decl, _, usage_assign, __014 );
field_declaration              = ( type_ref, _, identifier, _, statement_separator );
__015                          = ( __081 | ( _scope_reference, __009 ) );
__016                          = ( ( __015, base_type_ref ) | fn_type | tuple_inst );
__017                          = ( _, array_symbol );
__018                          = ( ( __017, __018 ) | __081 );
__019                          = __018;
type_ref                       = ( __016, __018 );
__020                          = ( __009, scope_name );
__021                          = ( ( __020, __021 ) | __081 );
__022                          = __021;
_scope_reference               = ( scope_name, __021 );
derived_type                   = ( ( __015, base_type_ref ) | tuple_inst );
__023                          = "[";
__024                          = "]";
tuple_inst                     = ( __023, _, _type_list, _, __024 );
__025                          = ( __081 | ( _, generic_types_inst ) );
base_type_ref                  = ( identifier, __025 );
__026                          = ( __081 | ( _, generic_types_decl ) );
base_type_decl                 = ( identifier, __026 );
__027                          = "<";
generic_types_decl             = ( __027, _, _name_list, _, _cast_end );
generic_types_inst             = ( __027, _, _type_list, _, _cast_end );
__028                          = "(";
__029                          = ")";
__030                          = ( __081 | ( __028, _, _type_list, _, __029, _ ) );
__031                          = ( __081 | ( __027, _, __030, type_ref, _, _cast_end ) );
fn_type                        = ( _keyword_fn, _, __031 );
__032                          = ",";
__033                          = ( __032, _, enum_value_decl, _ );
__034                          = ( ( __033, __034 ) | __081 );
__035                          = __034;
enum_definition                = ( _keyword_enum, _, identifier, _, __023, _, enum_value_decl, _, __034, __024 );
enum_value_decl                = ? IDENTIFIER ?;
__036                          = ( __081 | ( generic_types_decl, _ ) );
__037                          = ( __032, variant_value_decl, _ );
__038                          = ( ( __037, __038 ) | __081 );
__039                          = __038;
variant_definition             = ( _keyword_variant, _, identifier, _, __036, __023, _, variant_value_decl, _, __038, __024 );
variant_value_decl             = ( identifier, _, __028, _, type_ref, _, __029 );
__040                          = ( ( __017, __040 ) | __081 );
__041                          = __040;
__042                          = ( function_definition, _ );
__043                          = ( ( __042, __043 ) | __081 );
__044                          = __043;
implementation                 = ( _keyword_start_implementation, _, base_type_decl, __040, _, __010, _, __043, __013 );
constant_def                   = ( _keyword_const, _, type_ref, _, identifier, _, usage_assign, _, statement );
__045                          = ( function_block | _keyword_extern );
function_definition            = ( function_signature, _, __045 );
function_signature             = ( _keyword_fn, _, function_name, _, __036, _function_interface );
function_name                  = ? IDENTIFIER ?;
__046                          = ( __081 | ( parameter_list, _ ) );
__047                          = ":";
_function_interface            = ( __028, _, __046, __029, _, __047, _, type_ref );
__048                          = ( _, __032, _, parameter );
__049                          = ( ( __048, __049 ) | __081 );
__050                          = __049;
parameter_list                 = ( parameter, __049 );
__051                          = ( __081 | ( expansion_decl, _ ) );
parameter                      = ( type_ref, _, __051, identifier );
unnamed_parameter_list         = _type_list;
untyped_parameter_list         = _name_list;
return_type                    = type_ref;
__052                          = ( __081 | ( statement, _ ) );
__053                          = ( statement_separator, _, __052 );
__054                          = ( ( __053, __054 ) | __081 );
__055                          = __054;
function_block                 = ( __010, _, statement, _, __054, __013 );
__056                          = ( _, _mutator );
__057                          = ( ( __056, __057 ) | __081 );
__058                          = __057;
statement                      = ( _expression, __057 );
statement_separator            = ";";
_expression                    = ( identifier | static_function_call | _lamda | array_initialisation | _literal );
__059                          = ( __081 | _scope_reference );
static_function_call           = ( __059, _function_call_tail );
__060                          = ( __081 | ( type_ref, __009 ) );
method_call                    = ( __060, _function_call_tail );
__061                          = ( __081 | ( _, _argument_list ) );
__062                          = ( __081 | ( __028, __061, _, __029 ) );
_function_call_tail            = ( function_name, _, __062 );
__063                          = ( _, __032, _, named_argument );
__064                          = ( ( __063, __064 ) | __081 );
__065                          = __064;
_argument_list                 = ( _expression | ( named_argument, __064 ) );
single_argument                = _expression;
named_argument                 = ( identifier, _, __047, _, _expression );
__066                          = ( _, __032, _, type_ref );
__067                          = ( ( __066, __067 ) | __081 );
__068                          = __067;
_type_list                     = ( type_ref, __067 );
__069                          = ( _, __032, _, identifier );
__070                          = ( ( __069, __070 ) | __081 );
__071                          = __070;
_name_list                     = ( identifier, __070 );
_mutator                       = ( method_call | static_function_call | operator );
operator                       = ? SYMBOL ?;
_mutator_cast                  = ( usage_cast, _, type_ref, _, _cast_end );
__072                          = ( __081 | type_ref );
__073                          = ( _keyword_return | ( __072, _, identifier ) );
_mutator_assign                = ( usage_assign, _, __073 );
__074                          = ( _, __032, _, _expression );
__075                          = ( ( __074, __075 ) | __081 );
__076                          = __075;
__077                          = ( __081 | ( _, _expression, __075 ) );
array_initialisation           = ( __023, __077, _, __024 );
lambda                         = _lamda;
__078                          = ( __081 | ( __028, _, _name_list, _, __029, _ ) );
__079                          = ( __081 | ( __047, _, type_ref ) );
_lamda                         = ( __078, __079, _, function_block );
_literal                       = ( string_literal | integer_literal | float_literal );
string_literal                 = ? STRING ?;
integer_literal                = ? NUMBER ?;
float_literal                  = ( version_major, __009, version_major );
return_decl                    = _keyword_return;
native_decl                    = _keyword_extern;
usage_assign                   = "=";
usage_cast                     = ":<";
_cast_end                      = ">";
array_symbol                   = "[]";
expansion_decl                 = "...";
_keyword_version               = "version";
_keyword_type                  = "type";
_keyword_fn                    = "fn";
_keyword_enum                  = "enum";
_keyword_variant               = "variant";
_keyword_extern                = "extern";
_keyword_const                 = "const";
_keyword_this                  = "this";
_keyword_return                = "return";
_keyword_use                   = "use";
_keyword_start_implementation  = "impl";
__080                          = ? WHITESPACE ?;
_                              = ( __081 | __080 );


